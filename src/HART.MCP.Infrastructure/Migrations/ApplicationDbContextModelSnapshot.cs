// <auto-generated />
using System;
using HART.MCP.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HART.MCP.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HART.MCP.Domain.Entities.Agent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ExecutionCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastActiveAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SystemPrompt")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<TimeSpan>("TotalExecutionTime")
                        .HasColumnType("time");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.ToTable("Agents", (string)null);
                });

            modelBuilder.Entity("HART.MCP.Domain.Entities.AgentExecution", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Context")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Response")
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TokensUsed")
                        .HasColumnType("int");

                    b.Property<string>("TreeOfThoughtData")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("EndTime");

                    b.HasIndex("StartTime");

                    b.HasIndex("Status");

                    b.ToTable("AgentExecutions", (string)null);
                });

            modelBuilder.Entity("HART.MCP.Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcessingError")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Hash")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("HART.MCP.Domain.Entities.DocumentChunk", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChunkIndex")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EmbeddedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Embedding")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmbeddingModel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EndPosition")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("StartPosition")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChunkIndex");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DocumentId");

                    b.HasIndex("EmbeddingModel");

                    b.ToTable("DocumentChunks", (string)null);
                });

            modelBuilder.Entity("HART.MCP.Domain.Entities.Agent", b =>
                {
                    b.OwnsOne("HART.MCP.Domain.ValueObjects.AgentCapabilities", "Capabilities", b1 =>
                        {
                            b1.Property<Guid>("AgentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AvailableTools")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("nvarchar(2000)");

                            b1.Property<bool>("CanAccessExternalAPIs")
                                .HasColumnType("bit");

                            b1.Property<bool>("CanDelegateToOthers")
                                .HasColumnType("bit");

                            b1.Property<bool>("CanPerformRAG")
                                .HasColumnType("bit");

                            b1.Property<bool>("CanProcessDocuments")
                                .HasColumnType("bit");

                            b1.Property<bool>("CanUseTreeOfThought")
                                .HasColumnType("bit");

                            b1.Property<string>("CustomCapabilities")
                                .IsRequired()
                                .HasMaxLength(4000)
                                .HasColumnType("nvarchar(4000)");

                            b1.Property<string>("SupportedFileTypes")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)");

                            b1.Property<string>("SupportedLanguages")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.HasKey("AgentId");

                            b1.ToTable("Agents");

                            b1.WithOwner()
                                .HasForeignKey("AgentId");
                        });

                    b.OwnsOne("HART.MCP.Domain.ValueObjects.AgentConfiguration", "Configuration", b1 =>
                        {
                            b1.Property<Guid>("AgentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CustomSettings")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("nvarchar(2000)");

                            b1.Property<bool>("EnableMemory")
                                .HasColumnType("bit");

                            b1.Property<bool>("EnableToolUse")
                                .HasColumnType("bit");

                            b1.Property<int>("MaxTokens")
                                .HasColumnType("int");

                            b1.Property<string>("ModelName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<double>("Temperature")
                                .HasColumnType("float");

                            b1.Property<int>("TimeoutSeconds")
                                .HasColumnType("int");

                            b1.HasKey("AgentId");

                            b1.ToTable("Agents");

                            b1.WithOwner()
                                .HasForeignKey("AgentId");
                        });

                    b.Navigation("Capabilities")
                        .IsRequired();

                    b.Navigation("Configuration")
                        .IsRequired();
                });

            modelBuilder.Entity("HART.MCP.Domain.Entities.AgentExecution", b =>
                {
                    b.HasOne("HART.MCP.Domain.Entities.Agent", "Agent")
                        .WithMany("Executions")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("HART.MCP.Domain.Entities.Document", b =>
                {
                    b.OwnsOne("HART.MCP.Domain.ValueObjects.DocumentMetadata", "Metadata", b1 =>
                        {
                            b1.Property<Guid>("DocumentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Author")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<DateTime?>("CreationDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CustomProperties")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Keywords")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)");

                            b1.Property<string>("Language")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<DateTime?>("ModificationDate")
                                .HasColumnType("datetime2");

                            b1.Property<int>("PageCount")
                                .HasColumnType("int");

                            b1.Property<string>("Source")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("Subject")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.HasKey("DocumentId");

                            b1.ToTable("Documents");

                            b1.WithOwner()
                                .HasForeignKey("DocumentId");
                        });

                    b.Navigation("Metadata")
                        .IsRequired();
                });

            modelBuilder.Entity("HART.MCP.Domain.Entities.DocumentChunk", b =>
                {
                    b.HasOne("HART.MCP.Domain.Entities.Document", "Document")
                        .WithMany("Chunks")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("HART.MCP.Domain.Entities.Agent", b =>
                {
                    b.Navigation("Executions");
                });

            modelBuilder.Entity("HART.MCP.Domain.Entities.Document", b =>
                {
                    b.Navigation("Chunks");
                });
#pragma warning restore 612, 618
        }
    }
}
