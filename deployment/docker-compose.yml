version: '3.8'

networks:
  hart-network:
    driver: bridge

volumes:
  postgres_data:
  milvus_data:
  neo4j_data:
  hart_logs:


services:
  # Main HART-MCP Application (C# Enterprise Solution)
  hart-mcp:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hart-mcp-server
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__SqlServer=${SQL_SERVER_CONNECTION_STRING:-Data Source=host.docker.internal;Initial Catalog=HartMcp;Integrated Security=false;User ID=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=true}
      - ConnectionStrings__Redis=redis:6379
      - ConnectionStrings__Neo4j=bolt://neo4j:7687
      - Database__CommandTimeoutSeconds=30
      - Database__MaxPoolSize=100
      - Database__MinPoolSize=5
    ports:
      - "8080:8080"
      - "8081:8081"
    volumes:
      - hart_logs:/app/logs
    networks:
      - hart-network
    restart: unless-stopped
    depends_on:
      - redis
      - neo4j
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL (alternative to SQL Server for containerized deployment)
  postgres:
    image: postgres:15-alpine
    container_name: hart-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-hart_mcp}
      POSTGRES_USER: ${POSTGRES_USER:-hart_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - hart-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-hart_user}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Milvus Vector Database
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - hart-network

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    networks:
      - hart-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  milvus-standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.3.3
    command: [ "milvus", "run", "standalone" ]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - hart-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9091/healthz" ]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.15-community
    container_name: hart-neo4j
    environment:
      NEO4J_AUTH: ${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-secure_password}
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      NEO4J_dbms_memory_heap_initial__size: "512m"
      NEO4J_dbms_memory_heap_max__size: "1G"
    ports:
      - "7474:7474" # HTTP
      - "7687:7687" # Bolt
    volumes:
      - neo4j_data:/data
      - ./migrations/neo4j:/var/lib/neo4j/import
    networks:
      - hart-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "cypher-shell", "-u", "${NEO4J_USER:-neo4j}", "-p", "${NEO4J_PASSWORD:-secure_password}", "RETURN 1" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: hart-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    ports:
      - "6379:6379"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/redis:/data
    networks:
      - hart-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional for production)
  nginx:
    image: nginx:alpine
    container_name: hart-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - hart-mcp
    networks:
      - hart-network
    restart: unless-stopped
    profiles:
      - production
